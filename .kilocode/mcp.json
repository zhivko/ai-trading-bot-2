{
  "mcpServers": {
    "filesystem": {
      "command": "npx",
      "args": [
        "-y",
        "@modelcontextprotocol/server-filesystem",
        "./"
      ],
      "disabled": false,
      "alwaysAllow": []
    },
    "puppeteer": {
      "command": "npx",
      "args": [
        "-y",
        "@modelcontextprotocol/server-puppeteer",
        "--device-scale-factor=1"
      ],
      "alwaysAllow": [
        "puppeteer_fill",
        "puppeteer_click",
        "puppeteer_screenshot",
        "puppeteer_select",
        "puppeteer_hover",
        "puppeteer_navigate",
        "puppeteer_evaluate</tool name>\n<arguments>\n{\n  \"script\": \"document.getElementById('symbol-select').value\"\n}\n</arguments>\n</use_mcp_tool>",
        "puppeteer_navigate</tool name>\n<arguments>\n{\n  \"url\": \"http://192.168.1.52:5000\",\n  \"launchOptions\": {\n    \"defaultViewport\": {\n      \"width\": 1920,\n      \"height\": 1080\n    }\n  }\n}\n</arguments>\n</use_mcp_tool>",
        "puppeteer_evaluate</tool name>\n<arguments>\n{\n  \"script\": \"console.log('=== WEBSOCKET MESSAGE INSPECTION ==='); if (window.combinedWebSocket && window.combinedWebSocket.readyState === WebSocket.OPEN) { console.log('WebSocket is connected'); const originalHandler = window.combinedWebSocket.onmessage; window.combinedWebSocket.onmessage = function(event) { console.log('ðŸ“¨ INTERCEPTED MESSAGE:', event.data.substring(0, 500)); try { const message = JSON.parse(event.data); if (message.type === 'historical') { console.log('ðŸ“Š HISTORICAL DATA RECEIVED:', { symbol: message.symbol, dataLength: message.data.length, firstPoint: message.data[0], lastPoint: message.data[message.data.length - 1] }); } } catch (e) { console.error('Parse error:', e); } if (originalHandler) originalHandler.call(this, event); }; console.log('WebSocket message interception set up'); } else { console.log('WebSocket not connected or not ready'); }\"\n}\n</arguments>\n</use_mcp_tool>"
      ]
    }
  }
}